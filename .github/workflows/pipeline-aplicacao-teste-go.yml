
name: CI Projeto GO Testes

# V5 - versão com separação em 2 jobs - simples com apenas 1 versão da linguagem GO e apenas 1 SO
# job 1 - Build da imagem que será usada na construção dos conteiners. Enviar essa imagem para o registry do DockerHub
# job 2 - Logar no docker hub, baixar a imagem, rodar conteineres e testar a aplicação
#       - Matrix Strategy for Go versions

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  build_containers:   #-----------------------------------[   JOB 1 ]--------------------------------------------------#
    runs-on: ${{ matrix.so_type_version }}

    # Injetando das variáveis de ambiente os secrets criados no Github;
    # No Github: 
    #   - selecionar projeto
    #   - selecionar a branch
    #   - no menu HORIZONTAL superior clicar em Settings
    #   - rolar a tela até encontrar a seção Security          
    #   - clicar em Secrets and variables
    #   - clicar em Actions

    env: 
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DBNAME: ${{ secrets.POSTGRES_DBNAME }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_DBNAME }}

    strategy:
      matrix:
        go_version: ['1.17',]
        so_type_version: ['ubuntu-latest']
        # Versões do ubunto que o runner para e fica em espera: 19.10, 21.10, 22.10, 23.10
        # rodam de boa! 20.04, 22.04
    steps:
      - uses: actions/checkout@v3
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
            sudo apt-get update
            sudo apt-get install docker-compose         
         
      - name: docker-compose build
        run: docker-compose buildclear && cd ~/devops/f2-modulo1/curso2/f2-modulo1-curso2-projeto-go-testes && ls -la

# criando um artifact com o programa main

      - name: Upload programa main compilado
        uses: actions/upload-artifact@v3
        with:
          name: programa
          path: main


# O código abaixo, que foi comentado, é pra quando for usar minha imagem do Dockerhub        
          
#      - name: Push image to Docker Hub Registry
#        run: docker push brunojose1977/my-postgres:latest          
           
  run_containers_and_test: #-----------------------------------[   JOB 2 ]--------------------------------------------------#
    runs-on: ${{ matrix.so_type_version }}
    # definindo as variáveis de ambiente que serão usada para injetar os parâmetros de conexão
    env: 
      POSTGRES_HOST: localhost
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DBNAME: root
      POSTGRES_PORT: 5432

    needs: build_containers
    strategy:
        matrix:
          go_version: ['1.17',]
          so_type_version: ['ubuntu-latest']          
    steps:
      - uses: actions/checkout@v3
      - name: Setup GO
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go_version }}

# O código abaixo, que foi comentado, é pra quando for usar minha imagem do Dockerhub   
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}

#      - name: Pull image my-postgres from Docker Hub
#        run: docker pull brunojose1977/my-postgres:latest     

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose   

# O código abaixo, que foi comentado, é pra quando for usar minha imagem do Dockerhub             
#      - name: Pull image my-postgres from Docker Hub
#        run: docker pull brunojose1977/my-postgres:latest          

# Abaixo o exemplo de include de arquivos a pipeline principal
      - name: docker compose up 
        run: docker-compose up -d

      - name: Test
        run: go test -v main_test.go
  docker:
    needs: build_containers
    uses: ./.github/workflows/Docker.yml
    secrets: inherit
    
